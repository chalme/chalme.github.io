<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Hadoop 概念]]></title>
      <url>%2F2016%2F12%2F15%2Fhadoop-concept%2F</url>
      <content type="text"><![CDATA[面对大数据量的处理需求，一个常用的方法就是把他们分割成互不依赖的小份数据来分别计算处理，这就是所谓的单指令多数据流（single-instruation,multiple-data,SIMD）的数据计算模式。Hadoop 为这样的云计算需求提供了一套开源的计算框架和一套分布式文件系统。 Hadoop]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo br 问题]]></title>
      <url>%2F2016%2F12%2F14%2Fhexo-breaks%2F</url>
      <content type="text"><![CDATA[这两天用vim编写博客，在vim编写时使用了换行符，而且在hexo中同样也会显示出来，困扰了好久。按照markdown的语法来说这应该不会出现这个问题。 查阅了一些信息，hexo博客是由hexo-renderer-marked(package.json中含有)解析的，然后找到这一个依赖源在博客目录下node_modules/hexo-renderer-marked/,修改文件index.js找到 breaks 改为false。即可123456789hexo.config.marked = assign(&#123; gfm: true, pedantic: false, sanitize: false, tables: true, breaks: false, smartLists: true, smartypants: true&#125;, hexo.config.marked); 参考网址: 链接1链接2]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[关于容器技术]]></title>
      <url>%2F2016%2F12%2F11%2Fdocker-container%2F</url>
      <content type="text"><![CDATA[关于容器技术 容器定义首先必须是一个相对独立的运行环境，在这一点上，有点类似虚拟机的概念，但又没有虚拟机那样彻底。另外，在一个容器环境内，应该最小化其对外界的影响，比如不能在容器中把host上的资源全部消耗掉，这就是资源控制。 容器技术已经集成到了Linux内核中，已经被当作Linux内核原生提供的特性。 容器技术主要包括Namespace和Cgroup两个内核特性。 Namespace又称命名空间，它主要做访问隔离。其原理是针对一类资源进行抽象， 并将其封装在一起提供给一个容器使用，对于这类资源，因 为每个容器都有自己的抽象，而它们彼此之间是不可见的，所以就可以 做到访问隔离。 Cgroup 是control group的简称，又称控制组，它主要是做资源控制。 其原理是将一组进程放在一个控制组里，通过给这个控制组分配指定的 可用资源，达到控制这一组进程可用资源的目的。 实际上，Namespace和Cgroup并不是强相关的两种技术，用户可以根据需要单 独使用他们，比如单独使用Cgroup做资源管理，就是一种比较常见的做法。而 如果把他们应用到一起，在一个Namespace中的进程恰好又在一个Cgroup中， 那么这些进程就既有访问隔离，又有资源控制，符合容器的特性，这样就创建 了一个容器。 理解容器 容器的核心技术是 Cgroup + Namespace ，但光有这两个抽象的技术概念是无 法组成容器。Linux 容器的最小组成，可以由以下公式来表示： 1容器 = cgroup + namespace + rootfs + 容器引擎（用户态工具） 其各项功能分别是： Cgroup：资源控制。 Namespace： 访问控制。 rootfs：文件系统隔离。 容器引擎：生命周期控制。 容器的创建原理。 123456789101112131415161718192021代码一：pid = clone(fun, stack, flags, clone_arg);(flags: CLONE_NEWPID | CLONE_NEWNS | CLONE_NEWUSER | CLONE_NEWNET| CLONE_NEWipc | CLONE_NEWuts | ...)代码二：echo $pid &gt; /sys/fs/cgroup/cpu/tasksecho $pid &gt; /sys/fs/cgroup/cpuset/tasksecho $pid &gt; /sys/fs/cgroup/blkio/tasksecho $pid &gt; /sys/fs/cgroup/memory/tasksecho $pid &gt; /sys/fs/cgroup/devices/tasksecho $pid &gt; /sys/fs/cgroup/freezer/tasks代码三：fun() &#123; ... pivot_root("path_of_rootfs/", path); ... exec("/bin/bash"); ...&#125; 代码一，通过clone系统调用，并传入各个Namespace对应的clone flag ，创建了一个新的子进程，该进程拥有自己的Namespace。根据以上代码 可知，该进程拥有自己的pid、mount、user、net、ipc、uts namespace 。 代码二，将代码一中的进程pid写入各个Cgroup子系统中，这样该进程就 可以受到相应Cgroup子系统的控制。 代码三，该fun函数由上面生成的新进程执行，在fun函数中，通过 pivot_root系统调用，使进程进入一个新的rootfs，之后通过exec系统 调用，在新的Namespace、Cgroup、 rootfs 中执行”/bin/bash”程序。 通过以上操作，成功地在一个“容器”中运行了一个bash程序。 Cgroup 介绍Cgroup 是什么Cgroup 是 control group 的简写，属于Linux内核提供的一个特性，用于限制和隔离一组 进程对系统资源的使用，也就是做资源QoS，这些资源主要包括CPU、内存、block I/O和网 络带宽。 从实现的角度来看，Cgroup实现了一个通用的进程分组的框架，而不同资源的具体管理则 是由各个Cgroup子系统实现的。截止到内核4.1版本，Cgroup中实现的子系统及其作用如下： devices：设备权限控制。 cpuset：分配指定的CPU和内存节点。 cpu：控制CPU占用率。 cpuacct：统计CPU使用情况。 memory：限制内存的使用上限。 freezer：冻结（暂停）Cgroup中的进程。 net_cls：配合tc（traffic controller）限制网络带宽。 net_prio：设置进程的网络流量优先级。 huge_tlb：限制HugeTLB的使用。 perf_event：允许Perf工具基于Cgroup分组做性能检测。 在Cgroup出现之前，只能对一个进程做一些资源控制。 Namespace 介绍Namespace 是什么Namespace 是将内核的全局资源做封装，使得每个Namespace都有一份独立的资源，因此不同的进程在各自的Namespace内对同一种资源的使用不会互相干扰。 目前Linux内核总共实现了6种Namespace: IPC: 隔离System V IPC和POSIX消息队列。 Network：隔离网络资源。 Mount：隔离文件系统挂载点。 PID：隔离进程ID。 UTS：隔离主机名和域名。 User：隔离用户ID和组ID。 最后。。很失望目前不能继续下去。我读的这本书是docker进阶与实践，确实是进阶，之前没有了解过docker，现在写的基本都是在摘抄书上的内容，摘抄并没有错，但是确实理解不是特别 深刻，过段时间，在读。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[指针的详解]]></title>
      <url>%2F2016%2F09%2F12%2Fpointer-c%2F</url>
      <content type="text"><![CDATA[对于指针的确我之前还没真正了解，一次面试暴露无遗。确实还是应该好好学习一下指针。 今天看了一篇文章，确实还是挺详细的。 点此进入 了解指针一般要清楚3点 指针的类型 指针所指向的类型 指针的值 具体请看原文]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[git配置多个ssh用户]]></title>
      <url>%2F2016%2F08%2F04%2Fgitissue%2F</url>
      <content type="text"><![CDATA[今天这是我写的第一篇博客，不知道在使用git中遇到过下面的问题 : 自己配置了全局的用户信息，然后我们却有两个或两个之上 的git账号在不同的服务器上(比如github, csdn),或者我们正在做两个以上项目(在github)需要配置不同ssh， 我们的用户信息却不同, 但是我们却不能配置两个全局信息。为了使用ssh服务，避免每次都要输入用户密码，我们还是要使用秘钥来配置。 其实这就是个坑当我们是新手时，每次看到教程都要配置全局的个人信息(user.name, user.email)，虽然它比较简单，但确实导致了一些使用的问题。 切入正题，解决方案： 我们不要使用使用全局的用户信息配置，改成在项目内部配置。git config user.name "username"git config user.email "XXX@email.com" 配置公钥时，需要在~/.ssh目录下添加一个 config 的文件,格式如下Host 名称(自己决定，方便输入记忆的)HostName 主机名User 登录的用户名IdentityFile 私钥地址 例子123456789101112131415#github "注释Host github.com " 简称HostName github.com " 服务器地址User chalme " 用户名IdentityFile ~/.ssh/id_rsa " 公钥地址Host code.csdn.netHostName code.csdn.netUser chalmeIdentityFile ~/.ssh/id_rsa_csdnHost AHostName github.comUser BIdentityFile ~/.ssh/id_rsa_csdn]]></content>
    </entry>

    
  
  
</search>
