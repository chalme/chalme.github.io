<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chalme</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chalme.github.io/"/>
  <updated>2017-01-08T15:24:17.255Z</updated>
  <id>http://chalme.github.io/</id>
  
  <author>
    <name>Chalme</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于shell</title>
    <link href="http://chalme.github.io/2017/01/08/shell-config/"/>
    <id>http://chalme.github.io/2017/01/08/shell-config/</id>
    <published>2017-01-08T14:27:17.000Z</published>
    <updated>2017-01-08T15:24:17.255Z</updated>
    
    <content type="html"><![CDATA[<p>之前在逛博客的时候，发现zsh的一篇配置文档，用上十分爽。才过了没几天，又看到了fish这个shell，确实感觉比zsh强。感觉好善变啊。 -_-!!不过确实好用！！！</p>
<a id="more"></a>
<h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><p>使用 (oh-my-zsh) 来提升体检，还是不错的，github有40000+的星</p>
<h2 id="fish（推荐）"><a href="#fish（推荐）" class="headerlink" title="fish（推荐）"></a>fish（推荐）</h2><p><a href="https://fishshell.com" target="_blank" rel="external">fish (Friendly Interactive Shell)</a></p>
<blockquote>
<p>fish is a fully-equipped command line shell (like bash or zsh) that is smart and user-friendly. fish supports powerful features like syntax highlighting, autosuggestions, and tab completions that just work, with nothing to learn or configure.<br>If you want to make your command line more productive, more useful, and more fun, without learning a bunch of arcane syntax and configuration options, then fish might be just what you’re looking for!</p>
</blockquote>
<h3 id="为什么我喜欢"><a href="#为什么我喜欢" class="headerlink" title="为什么我喜欢"></a>为什么我喜欢</h3><ol>
<li>不需要过多配置，用户友好。</li>
<li>快，相比（过多配置的zsh来说）</li>
<li>vi 模式支持</li>
<li>(Oh-my-zsh)的功能基本都支持</li>
</ol>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><a href="https://github.com/oh-my-fish/oh-my-fish" target="_blank" rel="external">Oh-my-fish</a>来管理插件主题等等（和oh-my-zsh)功能差不多</p>
<ul>
<li>theme 我的主题 推荐 batman, es(目前我使用的主题)</li>
<li>plugin<ol>
<li>z(类似autojump功能，根据历史快捷进入目录)</li>
<li>re-search (向后搜索历史命令)</li>
</ol>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://wdxtub.com/2016/02/18/oh-my-zsh/" target="_blank" rel="external">zsh</a><br><a href="http://hackerxu.com/2015/12/13/fish.html" target="_blank" rel="external">1</a> <a href="http://erthalion.info/2014/08/08/from-bash-to-fish/" target="_blank" rel="external">2</a> <a href="https://geowarin.github.io/the-missing-fish-shell-tutorial.html" target="_blank" rel="external">3</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在逛博客的时候，发现zsh的一篇配置文档，用上十分爽。才过了没几天，又看到了fish这个shell，确实感觉比zsh强。感觉好善变啊。 -_-!!不过确实好用！！！&lt;/p&gt;
    
    </summary>
    
    
      <category term="shell" scheme="http://chalme.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>关于容器技术</title>
    <link href="http://chalme.github.io/2016/12/11/docker-container/"/>
    <id>http://chalme.github.io/2016/12/11/docker-container/</id>
    <published>2016-12-10T17:34:08.000Z</published>
    <updated>2016-12-15T19:06:30.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于容器技术"><a href="#关于容器技术" class="headerlink" title="关于容器技术"></a>关于容器技术</h2><blockquote>
<p><strong>容器定义</strong><br>首先必须是一个相对独立的运行环境，在这一点上，有点类似虚拟机的概念，但又没有虚拟机那样彻底。另外，在一个容器环境内，应该最小化其对外界的影响，比如不能在容器中把host上的资源全部消耗掉，这就是资源控制。</p>
</blockquote>
<a id="more"></a>
<ul>
<li>容器技术已经集成到了Linux内核中，已经被当作Linux内核原生提供的特性。</li>
<li><p>容器技术主要包括<code>Namespace</code>和<code>Cgroup</code>两个内核特性。</p>
<ol>
<li>Namespace又称命名空间，它主要做访问隔离。其原理是针对一类资源进行抽象， 并将其封装在一起提供给一个容器使用，对于这类资源，因 为每个容器都有自己的抽象，而它们彼此之间是不可见的，所以就可以 做到访问隔离。</li>
<li>Cgroup 是control group的简称，又称控制组，它主要是做资源控制。 其原理是将一组进程放在一个控制组里，通过给这个控制组分配指定的 可用资源，达到控制这一组进程可用资源的目的。</li>
</ol>
<p>实际上，Namespace和Cgroup并不是强相关的两种技术，用户可以根据需要单 独使用他们，比如单独使用Cgroup做资源管理，就是一种比较常见的做法。而 如果把他们应用到一起，在一个Namespace中的进程恰好又在一个Cgroup中， 那么这些进程就既有访问隔离，又有资源控制，符合容器的特性，这样就创建 了一个容器。</p>
</li>
</ul>
<h2 id="理解容器"><a href="#理解容器" class="headerlink" title="理解容器"></a>理解容器</h2><ul>
<li><p>容器的核心技术是 Cgroup + Namespace ，但光有这两个抽象的技术概念是无 法组成容器。Linux 容器的最小组成，可以由以下公式来表示：</p>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">容器 = cgroup + <span class="keyword">namespace</span> + rootfs + 容器引擎（用户态工具）</div></pre></td></tr></table></figure>
<p>  其各项功能分别是：</p>
<ul>
<li>Cgroup：资源控制。</li>
<li>Namespace： 访问控制。</li>
<li>rootfs：文件系统隔离。</li>
<li>容器引擎：生命周期控制。</li>
</ul>
</li>
<li><p>容器的创建原理。</p>
  <figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">代码一：</div><div class="line">pid = clone(<span class="function"><span class="keyword">fun</span>, <span class="title">stack</span></span>, flags, clone_arg);</div><div class="line">(<span class="symbol">flags:</span> CLONE_NEWPID | CLONE_NEWNS | CLONE_NEWUSER | CLONE_NEWNET</div><div class="line">| CLONE_NEWipc | CLONE_NEWuts | ...)</div><div class="line"></div><div class="line">代码二：</div><div class="line">echo $pid &gt; <span class="regexp">/sys/fs</span><span class="regexp">/cgroup/cpu</span><span class="regexp">/tasks</span></div><div class="line">echo $pid &gt; /sys<span class="regexp">/fs/cgroup</span><span class="regexp">/cpuset/tasks</span></div><div class="line">echo $pid &gt; <span class="regexp">/sys/fs</span><span class="regexp">/cgroup/blkio</span><span class="regexp">/tasks</span></div><div class="line">echo $pid &gt; /sys<span class="regexp">/fs/cgroup</span><span class="regexp">/memory/tasks</span></div><div class="line">echo $pid &gt; <span class="regexp">/sys/fs</span><span class="regexp">/cgroup/devices</span><span class="regexp">/tasks</span></div><div class="line">echo $pid &gt; /sys<span class="regexp">/fs/cgroup</span><span class="regexp">/freezer/tasks</span></div><div class="line"></div><div class="line">代码三：</div><div class="line"><span class="function"><span class="keyword">fun</span>() &#123;</span></div><div class="line">    ...</div><div class="line">    <span class="title">pivot_root</span>(<span class="string">"path_of_rootfs/"</span>, path);</div><div class="line">    ...</div><div class="line">    exec(<span class="string">"/bin/bash"</span>);</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>代码一，通过clone系统调用，并传入各个Namespace对应的clone flag ，创建了一个新的子进程，该进程拥有自己的Namespace。根据以上代码 可知，该进程拥有自己的pid、mount、user、net、ipc、uts namespace 。</li>
<li>代码二，将代码一中的进程pid写入各个Cgroup子系统中，这样该进程就 可以受到相应Cgroup子系统的控制。</li>
<li><p>代码三，该fun函数由上面生成的新进程执行，在fun函数中，通过 pivot_root系统调用，使进程进入一个新的rootfs，之后通过exec系统 调用，在新的Namespace、Cgroup、 rootfs 中执行”/bin/bash”程序。</p>
<p>通过以上操作，成功地在一个“容器”中运行了一个bash程序。</p>
</li>
</ol>
</li>
</ul>
<h2 id="Cgroup-介绍"><a href="#Cgroup-介绍" class="headerlink" title="Cgroup 介绍"></a>Cgroup 介绍</h2><h3 id="Cgroup-是什么"><a href="#Cgroup-是什么" class="headerlink" title="Cgroup 是什么"></a>Cgroup 是什么</h3><p>Cgroup 是 control group 的简写，属于Linux内核提供的一个特性，用于限制和隔离一组 进程对系统资源的使用，也就是做资源QoS，这些资源主要包括CPU、内存、block I/O和网 络带宽。</p>
<ul>
<li>从实现的角度来看，Cgroup实现了一个通用的进程分组的框架，而不同资源的具体管理则 是由各个Cgroup子系统实现的。截止到内核4.1版本，Cgroup中实现的子系统及其作用如下：<ol>
<li>devices：设备权限控制。</li>
<li>cpuset：分配指定的CPU和内存节点。</li>
<li>cpu：控制CPU占用率。</li>
<li>cpuacct：统计CPU使用情况。</li>
<li>memory：限制内存的使用上限。</li>
<li>freezer：冻结（暂停）Cgroup中的进程。</li>
<li>net_cls：配合tc（traffic controller）限制网络带宽。</li>
<li>net_prio：设置进程的网络流量优先级。</li>
<li>huge_tlb：限制HugeTLB的使用。</li>
<li>perf_event：允许Perf工具基于Cgroup分组做性能检测。</li>
</ol>
</li>
<li>在Cgroup出现之前，只能对一个进程做一些资源控制。</li>
</ul>
<h2 id="Namespace-介绍"><a href="#Namespace-介绍" class="headerlink" title="Namespace 介绍"></a>Namespace 介绍</h2><h3 id="Namespace-是什么"><a href="#Namespace-是什么" class="headerlink" title="Namespace 是什么"></a>Namespace 是什么</h3><p>Namespace 是将内核的全局资源做封装，使得每个Namespace都有一份独立的资源，因此不同的进程在各自的Namespace内对同一种资源的使用不会互相干扰。</p>
<ul>
<li>目前Linux内核总共实现了6种Namespace:<ol>
<li>IPC: 隔离System V IPC和POSIX消息队列。</li>
<li>Network：隔离网络资源。</li>
<li>Mount：隔离文件系统挂载点。</li>
<li>PID：隔离进程ID。</li>
<li>UTS：隔离主机名和域名。</li>
<li>User：隔离用户ID和组ID。</li>
</ol>
</li>
</ul>
<h2 id="最后。。"><a href="#最后。。" class="headerlink" title="最后。。"></a>最后。。</h2><p>很失望目前不能继续下去。我读的这本书是<code>docker进阶与实践</code>，确实是进阶，之前没有了解过docker，现在写的基本都是在摘抄书上的内容，摘抄并没有错，但是确实理解不是特别 深刻，过段时间，在读。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于容器技术&quot;&gt;&lt;a href=&quot;#关于容器技术&quot; class=&quot;headerlink&quot; title=&quot;关于容器技术&quot;&gt;&lt;/a&gt;关于容器技术&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;容器定义&lt;/strong&gt;&lt;br&gt;首先必须是一个相对独立的运行环境，在这一点上，有点类似虚拟机的概念，但又没有虚拟机那样彻底。另外，在一个容器环境内，应该最小化其对外界的影响，比如不能在容器中把host上的资源全部消耗掉，这就是资源控制。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://chalme.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>指针的详解</title>
    <link href="http://chalme.github.io/2016/09/12/pointer-c/"/>
    <id>http://chalme.github.io/2016/09/12/pointer-c/</id>
    <published>2016-09-12T01:24:54.000Z</published>
    <updated>2016-12-14T19:19:24.589Z</updated>
    
    <content type="html"><![CDATA[<p>对于指针的确我之前还没真正了解，一次面试暴露无遗。确实还是应该好好学习一下指针。<br><a id="more"></a></p>
<p>今天看了一篇文章，确实还是挺详细的。 <a href="http://www.cnblogs.com/ggjucheng/archive/2011/12/13/2286391.html" target="_blank" rel="external">点此进入</a></p>
<blockquote>
<p>了解指针一般要清楚3点</p>
<ol>
<li>指针的类型</li>
<li>指针所指向的类型</li>
<li>指针的值</li>
</ol>
</blockquote>
<p>具体请看<a href="http://www.cnblogs.com/ggjucheng/archive/2011/12/13/2286391.html" target="_blank" rel="external">原文</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于指针的确我之前还没真正了解，一次面试暴露无遗。确实还是应该好好学习一下指针。&lt;br&gt;
    
    </summary>
    
    
      <category term="c/c++" scheme="http://chalme.github.io/tags/c-c/"/>
    
  </entry>
  
  <entry>
    <title>git配置多个ssh用户</title>
    <link href="http://chalme.github.io/2016/08/04/gitissue/"/>
    <id>http://chalme.github.io/2016/08/04/gitissue/</id>
    <published>2016-08-03T18:32:35.000Z</published>
    <updated>2016-12-14T19:19:24.589Z</updated>
    
    <content type="html"><![CDATA[<p>今天这是我写的第一篇博客，不知道在使用git中遇到过下面的问题 :</p>
<blockquote><p>自己配置了全局的用户信息，然后我们却有两个或两个之上 的git账号在不同的服务器上(比如<br>github, csdn),或者我们正在做两个以上项目(在github)需要配置不同ssh， 我们的用户信息却<br>不同, 但是我们却不能配置两个全局信息。为了使用ssh服务，避免每次都要输入用户密码，我们<br>还是要使用秘钥来配置。</p>
</blockquote>
<a id="more"></a>
<h2 id="其实这就是个坑"><a href="#其实这就是个坑" class="headerlink" title="其实这就是个坑"></a>其实这就是个坑</h2><p>当我们是新手时，每次看到教程都要配置全局的个人信息(user.name, user.email)，虽然它比较简单，但确实导致<br>了一些使用的问题。 切入正题，解决方案：</p>
<blockquote>
<p>我们不要使用使用全局的用户信息配置，改成在项目内部配置。<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">git config user.name <span class="string">"username"</span></div><div class="line">git config user.email <span class="string">"XXX@email.com"</span></div></pre></td></tr></table></figure></p>
<p>配置公钥时，需要在<code>~/.ssh</code>目录下添加一个 <code>config</code> 的文件,格式如下<br><figure class="highlight crmsh"><table><tr><td class="code"><pre><div class="line">Host                         名称(自己决定，方便输入记忆的)</div><div class="line">HostName                     主机名</div><div class="line"><span class="keyword">User</span>                         <span class="title">登录的用户名</span></div><div class="line">IdentityFile                 私钥地址</div></pre></td></tr></table></figure></p>
<p>例子<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#github                    <span class="comment">"注释</span></div><div class="line">Host github.<span class="keyword">com</span>            <span class="comment">" 简称</span></div><div class="line">HostName github.<span class="keyword">com</span>        <span class="comment">" 服务器地址</span></div><div class="line">User chalme                <span class="comment">" 用户名</span></div><div class="line">IdentityFile ~/.ssh/id_rsa <span class="comment">" 公钥地址</span></div><div class="line"></div><div class="line">Host code.csdn.net</div><div class="line">HostName code.csdn.net</div><div class="line">User chalme</div><div class="line">IdentityFile ~/.ssh/id_rsa_csdn</div><div class="line"></div><div class="line">Host A</div><div class="line">HostName github.<span class="keyword">com</span></div><div class="line">User B</div><div class="line">IdentityFile ~/.ssh/id_rsa_csdn</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天这是我写的第一篇博客，不知道在使用git中遇到过下面的问题 :&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;自己配置了全局的用户信息，然后我们却有两个或两个之上 的git账号在不同的服务器上(比如&lt;br&gt;github, csdn),或者我们正在做两个以上项目(在github)需要配置不同ssh， 我们的用户信息却&lt;br&gt;不同, 但是我们却不能配置两个全局信息。为了使用ssh服务，避免每次都要输入用户密码，我们&lt;br&gt;还是要使用秘钥来配置。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://chalme.github.io/tags/git/"/>
    
  </entry>
  
</feed>
